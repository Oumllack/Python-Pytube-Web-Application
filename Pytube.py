import streamlit as st
import os
from datetime import datetime
import tempfile
import shutil
import requests
import json
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
import re

# Configuration de la page
st.set_page_config(
    page_title="YouTube Downloader",
    page_icon="üé•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Style CSS personnalis√©
st.markdown("""
    <style>
    .main {
        padding: 2rem;
    }
    .stButton>button {
        width: 100%;
        background-color: #FF0000;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
    }
    .stButton>button:hover {
        background-color: #CC0000;
    }
    .progress-bar {
        width: 100%;
        height: 20px;
        background-color: #f0f0f0;
        border-radius: 10px;
        overflow: hidden;
    }
    .progress-bar-fill {
        height: 100%;
        background-color: #FF0000;
        transition: width 0.3s ease-in-out;
    }
    </style>
    """, unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.title("üì± YouTube Downloader")
    st.markdown("---")
    st.markdown("### √Ä propos")
    st.markdown("""
    Cette application vous permet de :
    - T√©l√©charger des vid√©os YouTube
    - Choisir la qualit√© de la vid√©o
    - T√©l√©charger uniquement l'audio
    - Voir les informations de la vid√©o
    """)
    st.markdown("---")
    st.markdown("### D√©velopp√© avec ‚ù§Ô∏è")
    st.markdown("Streamlit ‚Ä¢ YouTube API")

# Fonction pour extraire l'ID de la vid√©o
def extract_video_id(url):
    video_id = None
    if 'youtube.com' in url:
        video_id = re.search(r'v=([^&]+)', url)
        if video_id:
            return video_id.group(1)
    elif 'youtu.be' in url:
        video_id = re.search(r'youtu.be/([^?]+)', url)
        if video_id:
            return video_id.group(1)
    return None

# Fonction pour obtenir les informations de la vid√©o
def get_video_info(video_id, api_key):
    try:
        youtube = build('youtube', 'v3', developerKey=api_key)
        request = youtube.videos().list(
            part="snippet,contentDetails,statistics",
            id=video_id
        )
        response = request.execute()
        
        if not response['items']:
            return None
            
        video_data = response['items'][0]
        return {
            'title': video_data['snippet']['title'],
            'author': video_data['snippet']['channelTitle'],
            'thumbnail': video_data['snippet']['thumbnails']['high']['url'],
            'duration': video_data['contentDetails']['duration'],
            'views': int(video_data['statistics']['viewCount'])
        }
    except HttpError as e:
        st.error(f"Erreur API YouTube: {str(e)}")
        return None

# Fonction principale
def main():
    st.title("üé• YouTube Downloader")
    st.markdown("---")

    # Configuration de l'API key
    api_key = st.text_input("Entrez votre cl√© API YouTube:", type="password")
    if not api_key:
        st.warning("Veuillez entrer une cl√© API YouTube pour continuer.")
        st.info("""
        Pour obtenir une cl√© API YouTube :
        1. Allez sur https://console.cloud.google.com/
        2. Cr√©ez un nouveau projet
        3. Activez l'API YouTube Data v3
        4. Cr√©ez des identifiants (cl√© API)
        """)
        return

    # Configuration du dossier de t√©l√©chargement
    download_dir = st.text_input("Dossier de t√©l√©chargement (optionnel):", value=os.path.expanduser("~/Downloads"))
    if not os.path.exists(download_dir):
        os.makedirs(download_dir)

    # Champ de saisie URL
    url = st.text_input("Collez l'URL de la vid√©o YouTube ici:")

    if url:
        try:
            # Extraction de l'ID de la vid√©o
            video_id = extract_video_id(url)
            if not video_id:
                st.error("URL YouTube invalide. Veuillez entrer une URL valide.")
                return

            # Obtenir les informations de la vid√©o
            video_info = get_video_info(video_id, api_key)
            if not video_info:
                st.error("Impossible d'obtenir les informations de la vid√©o. V√©rifiez votre cl√© API et l'URL.")
                return

            # Affichage des informations de la vid√©o
            col1, col2 = st.columns([1, 2])
            
            with col1:
                st.image(video_info['thumbnail'], width=300)
            
            with col2:
                st.subheader(video_info['title'])
                st.markdown(f"**Auteur:** {video_info['author']}")
                st.markdown(f"**Vues:** {video_info['views']:,}")
                
                # Options de t√©l√©chargement
                st.markdown("### Options de t√©l√©chargement")
                download_type = st.radio(
                    "Choisissez le type de t√©l√©chargement:",
                    ["Vid√©o", "Audio uniquement"]
                )
                
                if st.button("T√©l√©charger"):
                    st.warning("""
                    ‚ö†Ô∏è Note importante :
                    L'API YouTube ne permet pas directement le t√©l√©chargement de vid√©os.
                    Pour t√©l√©charger des vid√©os YouTube, vous devez utiliser une biblioth√®que tierce.
                    
                    Suggestions :
                    1. Utilisez youtube-dl (en ligne de commande)
                    2. Utilisez un service web de t√©l√©chargement
                    3. Utilisez un navigateur avec une extension de t√©l√©chargement
                    """)
        
        except Exception as e:
            st.error(f"Une erreur est survenue: {str(e)}")
            st.info("Conseils de d√©pannage:")
            st.markdown("""
            - V√©rifiez que l'URL est correcte
            - Assurez-vous que la vid√©o est publique
            - V√©rifiez votre cl√© API
            - Essayez une autre vid√©o
            """)

if __name__ == "__main__":
    main()